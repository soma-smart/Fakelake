{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fakelake FakeLake is a command line tool that generates fake data from a YAML schema. Example Here is a YAML file that will generate 1 millions rows with 4 columns. columns: - name: id provider: Increment.integer start: 42 presence: 0.8 - name: first_name provider: Person.fname - name: company_email provider: Person.email domain: soma-smart.com corrupted: 0.0001 - name: created provider: Random.Date.date format: \"%Y-%m-%d\" after: 2000-02-15 before: 2020-07-17 info: output_name: all_options output_format: parquet rows: 1_000_000 Click here to create your YAML file. Click here to generate from a YAML file.","title":"Home"},{"location":"#fakelake","text":"FakeLake is a command line tool that generates fake data from a YAML schema.","title":"Fakelake"},{"location":"#example","text":"Here is a YAML file that will generate 1 millions rows with 4 columns. columns: - name: id provider: Increment.integer start: 42 presence: 0.8 - name: first_name provider: Person.fname - name: company_email provider: Person.email domain: soma-smart.com corrupted: 0.0001 - name: created provider: Random.Date.date format: \"%Y-%m-%d\" after: 2000-02-15 before: 2020-07-17 info: output_name: all_options output_format: parquet rows: 1_000_000 Click here to create your YAML file. Click here to generate from a YAML file.","title":"Example"},{"location":"columns/options/","text":"Optional Parameters On top of the provider's logic, you can apply options Presence - name: column_name provider: Any.provider presence: 0.8 Adds a percentage of presence to the column: with missing values in the result. Default value is 1 , or always present. The parameter should be set between 0 and 1, otherwise it will be set to the closest. In this example, 80% of the column will be generated, 20% will be missing. Corrupted - name: column_name provider: Any.provider corrupted: 0.001 Adds a percentage of corruption to the column: the provider asked will not validate the asked rule. For example for an email, the resulting will not be an email. For a random date or integer, it will not use the interval you provide. Default value is 0 , or no corruption. The parameter should be set between 0 and 1, otherwise it will be set to the closest. In this example, 0.1% of the column will be corrupted.","title":"Options"},{"location":"columns/options/#optional-parameters","text":"On top of the provider's logic, you can apply options","title":"Optional Parameters"},{"location":"columns/options/#presence","text":"- name: column_name provider: Any.provider presence: 0.8 Adds a percentage of presence to the column: with missing values in the result. Default value is 1 , or always present. The parameter should be set between 0 and 1, otherwise it will be set to the closest. In this example, 80% of the column will be generated, 20% will be missing.","title":"Presence"},{"location":"columns/options/#corrupted","text":"- name: column_name provider: Any.provider corrupted: 0.001 Adds a percentage of corruption to the column: the provider asked will not validate the asked rule. For example for an email, the resulting will not be an email. For a random date or integer, it will not use the interval you provide. Default value is 0 , or no corruption. The parameter should be set between 0 and 1, otherwise it will be set to the closest. In this example, 0.1% of the column will be corrupted.","title":"Corrupted"},{"location":"columns/providers/","text":"Providers Constant Increment Person Random","title":"Index"},{"location":"columns/providers/#providers","text":"Constant Increment Person Random","title":"Providers"},{"location":"columns/providers/constant/","text":"Constant provider external - name: external_data provider: Constant.external path: path/to/data.txt This provider enables to load a list of strings from external data file. Each line of this external file is considered as a value. A value is randomly assigned for each line. The parameter path contains the path to the file. If file doesn't exist, a error is raised. Options are also possible. In this case, corrupted means random string value which is not into the file. string unique value - name: constant_as_string provider: Constant.string data: trout list of values - name: list_of_constants_as_string provider: Constant.string data: [trout, salmon, carp] list of weighted values - name: list_of_weighted_constants_as_string provider: Constant.string data: - value: trout - value: salmon weight: 8 - value: carp Data value can be unique value, a list of values or a dictionnary. Integer, float or string can be specify into the configuration but the result will be stored as a string. If a unique value is specified, all lines will have this value. If a list of values is specified, value will randomly assigned for each line. If a weighted list of values is specified, value will weighted randomly assigned for each line: for example is useful to generate data skewing. Options are also possible.","title":"Constant"},{"location":"columns/providers/constant/#constant-provider","text":"","title":"Constant provider"},{"location":"columns/providers/constant/#external","text":"- name: external_data provider: Constant.external path: path/to/data.txt This provider enables to load a list of strings from external data file. Each line of this external file is considered as a value. A value is randomly assigned for each line. The parameter path contains the path to the file. If file doesn't exist, a error is raised. Options are also possible. In this case, corrupted means random string value which is not into the file.","title":"external"},{"location":"columns/providers/constant/#string","text":"","title":"string"},{"location":"columns/providers/constant/#unique-value","text":"- name: constant_as_string provider: Constant.string data: trout","title":"unique value"},{"location":"columns/providers/constant/#list-of-values","text":"- name: list_of_constants_as_string provider: Constant.string data: [trout, salmon, carp]","title":"list of values"},{"location":"columns/providers/constant/#list-of-weighted-values","text":"- name: list_of_weighted_constants_as_string provider: Constant.string data: - value: trout - value: salmon weight: 8 - value: carp Data value can be unique value, a list of values or a dictionnary. Integer, float or string can be specify into the configuration but the result will be stored as a string. If a unique value is specified, all lines will have this value. If a list of values is specified, value will randomly assigned for each line. If a weighted list of values is specified, value will weighted randomly assigned for each line: for example is useful to generate data skewing. Options are also possible.","title":"list of weighted values"},{"location":"columns/providers/increment/","text":"Increment provider integer - name: adding_one_to_integer provider: Increment.integer start: 100 step: 2 Increment an integer by one each row. It starts from the optional parameter start . Default is 0. It increments by the optional parameter step . Default is 1. Options are also possible. In this case, corrupted means random int32.","title":"Increment"},{"location":"columns/providers/increment/#increment-provider","text":"","title":"Increment provider"},{"location":"columns/providers/increment/#integer","text":"- name: adding_one_to_integer provider: Increment.integer start: 100 step: 2 Increment an integer by one each row. It starts from the optional parameter start . Default is 0. It increments by the optional parameter step . Default is 1. Options are also possible. In this case, corrupted means random int32.","title":"integer"},{"location":"columns/providers/person/","text":"Person provider email - name: email provider: Person.email domain: soma-smart.com Create a random email with: random string of length 10 for the local-part optional domain parameter. Default is \"example.com\" Options are also possible. In this case, corrupted means random string not in UTF8 format. fname - name: first_name_in_top_1000_fr provider: Person.fname Returns a random first name from top 1000 french list. Options are also possible. In this case, corrupted means random string not in UTF8 format. lname - name: last_name_in_top_1000_fr provider: Person.lname Returns a random last name from top 1000 french list. Options are also possible. In this case, corrupted means random string not in UTF8 format.","title":"Person"},{"location":"columns/providers/person/#person-provider","text":"","title":"Person provider"},{"location":"columns/providers/person/#email","text":"- name: email provider: Person.email domain: soma-smart.com Create a random email with: random string of length 10 for the local-part optional domain parameter. Default is \"example.com\" Options are also possible. In this case, corrupted means random string not in UTF8 format.","title":"email"},{"location":"columns/providers/person/#fname","text":"- name: first_name_in_top_1000_fr provider: Person.fname Returns a random first name from top 1000 french list. Options are also possible. In this case, corrupted means random string not in UTF8 format.","title":"fname"},{"location":"columns/providers/person/#lname","text":"- name: last_name_in_top_1000_fr provider: Person.lname Returns a random last name from top 1000 french list. Options are also possible. In this case, corrupted means random string not in UTF8 format.","title":"lname"},{"location":"columns/providers/random/","text":"Random provider Boolean - name: is_subscribed provider: Random.bool Create a random boolean. Options are also possible. In this case, corrupted does not change anything as it is still a boolean. Date date - name: created provider: Random.Date.date format: \"%m-%d-%Y\" after: 02-15-2000 before: 07-17-2020 Create a random date with: an optional parameter format . Default is \"%Y-%m-%d\" an optional parameter after as a lower boundary. It should follow the format parameter. Default is 1980-01-01 an optional parameter before as a upper boundary. It should follow the format parameter. Default is 2000-01-01 Options are also possible. In this case, corrupted means random date without using the parameters as limit. datetime - name: connection provider: Random.Date.datetime format: \"%m-%d-%Y %H-%M-%S\" after: 02-15-2000 12:01:01 before: 07-17-2020 15:06:06 Create a random datetime with: an optional parameter format . Default is \"%Y-%m-%d %H:%M:%S\" an optional parameter after as a lower boundary. It should follow the format parameter. Default is 1980-01-01 12:00:00 an optional parameter before as a upper boundary. It should follow the format parameter. Default is 2000-01-01 12:00:00 Options are also possible. In this case, corrupted means random datetime without using the parameters as limit. Number f64 - name: percentage provider: Random.Number.f64 min: -1000 max: 1000.78 Create a random 64 bits float with: an optional parameter min . Default is the minimum 64bits float. an optional parameter max . Default is the maximum 64bits float. Options are also possible. i32 - name: score provider: Random.Number.i32 min: -100 max: 100 Create a random 32 bits integer with: an optional parameter min . Default is the minimum 32bits integer. an optional parameter max . Default is the maximum 32bits integer. Options are also possible. In this case, corrupted means random int32 without using the parameters as limit. String alphanumeric - name: string_code provider: Random.String.alphanumeric length: 5..15 Create a random string, with only Alphanumerics characters. an optional parameter length to specify the length of the string. This parameter can be a range 5..15 or a constant 8 . Default is 10. Options are also possible. In this case, corrupted means random string not in UTF8 format.","title":"Random"},{"location":"columns/providers/random/#random-provider","text":"","title":"Random provider"},{"location":"columns/providers/random/#boolean","text":"- name: is_subscribed provider: Random.bool Create a random boolean. Options are also possible. In this case, corrupted does not change anything as it is still a boolean.","title":"Boolean"},{"location":"columns/providers/random/#date","text":"","title":"Date"},{"location":"columns/providers/random/#date_1","text":"- name: created provider: Random.Date.date format: \"%m-%d-%Y\" after: 02-15-2000 before: 07-17-2020 Create a random date with: an optional parameter format . Default is \"%Y-%m-%d\" an optional parameter after as a lower boundary. It should follow the format parameter. Default is 1980-01-01 an optional parameter before as a upper boundary. It should follow the format parameter. Default is 2000-01-01 Options are also possible. In this case, corrupted means random date without using the parameters as limit.","title":"date"},{"location":"columns/providers/random/#datetime","text":"- name: connection provider: Random.Date.datetime format: \"%m-%d-%Y %H-%M-%S\" after: 02-15-2000 12:01:01 before: 07-17-2020 15:06:06 Create a random datetime with: an optional parameter format . Default is \"%Y-%m-%d %H:%M:%S\" an optional parameter after as a lower boundary. It should follow the format parameter. Default is 1980-01-01 12:00:00 an optional parameter before as a upper boundary. It should follow the format parameter. Default is 2000-01-01 12:00:00 Options are also possible. In this case, corrupted means random datetime without using the parameters as limit.","title":"datetime"},{"location":"columns/providers/random/#number","text":"","title":"Number"},{"location":"columns/providers/random/#f64","text":"- name: percentage provider: Random.Number.f64 min: -1000 max: 1000.78 Create a random 64 bits float with: an optional parameter min . Default is the minimum 64bits float. an optional parameter max . Default is the maximum 64bits float. Options are also possible.","title":"f64"},{"location":"columns/providers/random/#i32","text":"- name: score provider: Random.Number.i32 min: -100 max: 100 Create a random 32 bits integer with: an optional parameter min . Default is the minimum 32bits integer. an optional parameter max . Default is the maximum 32bits integer. Options are also possible. In this case, corrupted means random int32 without using the parameters as limit.","title":"i32"},{"location":"columns/providers/random/#string","text":"","title":"String"},{"location":"columns/providers/random/#alphanumeric","text":"- name: string_code provider: Random.String.alphanumeric length: 5..15 Create a random string, with only Alphanumerics characters. an optional parameter length to specify the length of the string. This parameter can be a range 5..15 or a constant 8 . Default is 10. Options are also possible. In this case, corrupted means random string not in UTF8 format.","title":"alphanumeric"},{"location":"output/parameters/","text":"Output parameters Generate file name To change the name of the generated file, use output_name info: output_name: generate_file_name Format To choose the format of the generated file, use output_format. Parquet info: output_format: parquet CSV info: output_format: csv delimiter: ',' Default delimiter is ',' but you can specify any character. JSON info: output_format: json wrap_up: false By default, wrap_up is set to false. When wrap_up is set to false, each line into the result file is a json object but the whole file is not a valid json. When wrap_up is set to true, the whole file is a valid json, rows are wrapped up into an array. Rows To choose the number of rows in the generated file, use rows. info: rows: 1000000 It can also be written with delimiters for readibilty. info: rows: 1_000_000","title":"Parameters"},{"location":"output/parameters/#output-parameters","text":"","title":"Output parameters"},{"location":"output/parameters/#generate-file-name","text":"To change the name of the generated file, use output_name info: output_name: generate_file_name","title":"Generate file name"},{"location":"output/parameters/#format","text":"To choose the format of the generated file, use output_format.","title":"Format"},{"location":"output/parameters/#parquet","text":"info: output_format: parquet","title":"Parquet"},{"location":"output/parameters/#csv","text":"info: output_format: csv delimiter: ',' Default delimiter is ',' but you can specify any character.","title":"CSV"},{"location":"output/parameters/#json","text":"info: output_format: json wrap_up: false By default, wrap_up is set to false. When wrap_up is set to false, each line into the result file is a json object but the whole file is not a valid json. When wrap_up is set to true, the whole file is a valid json, rows are wrapped up into an array.","title":"JSON"},{"location":"output/parameters/#rows","text":"To choose the number of rows in the generated file, use rows. info: rows: 1000000 It can also be written with delimiters for readibilty. info: rows: 1_000_000","title":"Rows"},{"location":"usage/create_your_yaml_file/","text":"Create your YAML file A YAML file for Fakelake is composed of two parts: Columns A list of columns with a name, a provider, provider's parameters and options . Click here for the list of available providers. Example of a file with one column: columns: - name: unique_id provider: Increment.integer start: 100 Info To setup the generated file, see here . Example of a parquet file of 10 million rows: info: output_name: generated_file output_format: parquet rows: 10_000_000 Example columns: - name: unique_id provider: Increment.integer start: 100 info: output_name: generated_file output_format: parquet rows: 10_000_000 That's it ! This is enough to generate a parquet file. Next step, generate it.","title":"Create your yaml file"},{"location":"usage/create_your_yaml_file/#create-your-yaml-file","text":"A YAML file for Fakelake is composed of two parts:","title":"Create your YAML file"},{"location":"usage/create_your_yaml_file/#columns","text":"A list of columns with a name, a provider, provider's parameters and options . Click here for the list of available providers. Example of a file with one column: columns: - name: unique_id provider: Increment.integer start: 100","title":"Columns"},{"location":"usage/create_your_yaml_file/#info","text":"To setup the generated file, see here . Example of a parquet file of 10 million rows: info: output_name: generated_file output_format: parquet rows: 10_000_000","title":"Info"},{"location":"usage/create_your_yaml_file/#example","text":"columns: - name: unique_id provider: Increment.integer start: 100 info: output_name: generated_file output_format: parquet rows: 10_000_000 That's it ! This is enough to generate a parquet file. Next step, generate it.","title":"Example"},{"location":"usage/generate/","text":"Generate data Now that you have a yaml file ready to be used (cf here ), we can generate it using fakelake. Get executable With precompiled binaries Download the latest release from here tar -xvf Fakelake_<version>_<target>.tar.gz ./fakelake --help From source git clone https://github.com/soma-smart/Fakelake cd fakelake cargo build --release ./target/release/fakelake --help Generate To generate from one YAML file you can use: fakelake generate config_file.yaml You can also chain the files to generate multiples: fakelake generate first_file.yaml second_file.yaml","title":"Generate"},{"location":"usage/generate/#generate-data","text":"Now that you have a yaml file ready to be used (cf here ), we can generate it using fakelake.","title":"Generate data"},{"location":"usage/generate/#get-executable","text":"","title":"Get executable"},{"location":"usage/generate/#with-precompiled-binaries","text":"Download the latest release from here tar -xvf Fakelake_<version>_<target>.tar.gz ./fakelake --help","title":"With precompiled binaries"},{"location":"usage/generate/#from-source","text":"git clone https://github.com/soma-smart/Fakelake cd fakelake cargo build --release ./target/release/fakelake --help","title":"From source"},{"location":"usage/generate/#generate","text":"To generate from one YAML file you can use: fakelake generate config_file.yaml You can also chain the files to generate multiples: fakelake generate first_file.yaml second_file.yaml","title":"Generate"}]}